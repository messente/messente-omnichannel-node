/**
 * Omnichannel API
 * This is the beta version of Omnichannel API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: admin@messente.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/MessageResult', 'model/OmniMessageCreateSuccessResponse', 'model/Omnimessage', 'model/SMS', 'model/ScenarioItem', 'model/Scenarios', 'model/Viber', 'api/OmnimessageApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ErrorResponse'), require('./model/MessageResult'), require('./model/OmniMessageCreateSuccessResponse'), require('./model/Omnimessage'), require('./model/SMS'), require('./model/ScenarioItem'), require('./model/Scenarios'), require('./model/Viber'), require('./api/OmnimessageApi'));
  }
}(function(ApiClient, ErrorResponse, MessageResult, OmniMessageCreateSuccessResponse, Omnimessage, SMS, ScenarioItem, Scenarios, Viber, OmnimessageApi) {
  'use strict';

  /**
   * This_is_the_beta_version_of_Omnichannel_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var OmnichannelApi = require('index'); // See note below*.
   * var xxxSvc = new OmnichannelApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new OmnichannelApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new OmnichannelApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new OmnichannelApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The MessageResult model constructor.
     * @property {module:model/MessageResult}
     */
    MessageResult: MessageResult,
    /**
     * The OmniMessageCreateSuccessResponse model constructor.
     * @property {module:model/OmniMessageCreateSuccessResponse}
     */
    OmniMessageCreateSuccessResponse: OmniMessageCreateSuccessResponse,
    /**
     * The Omnimessage model constructor.
     * @property {module:model/Omnimessage}
     */
    Omnimessage: Omnimessage,
    /**
     * The SMS model constructor.
     * @property {module:model/SMS}
     */
    SMS: SMS,
    /**
     * The ScenarioItem model constructor.
     * @property {module:model/ScenarioItem}
     */
    ScenarioItem: ScenarioItem,
    /**
     * The Scenarios model constructor.
     * @property {module:model/Scenarios}
     */
    Scenarios: Scenarios,
    /**
     * The Viber model constructor.
     * @property {module:model/Viber}
     */
    Viber: Viber,
    /**
     * The OmnimessageApi service constructor.
     * @property {module:api/OmnimessageApi}
     */
    OmnimessageApi: OmnimessageApi
  };

  return exports;
}));
