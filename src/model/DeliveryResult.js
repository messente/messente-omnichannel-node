/**
 * Omnichannel API
 * This is the beta version of Omnichannel API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.1.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Channel', 'model/Status'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Channel'), require('./Status'));
  } else {
    // Browser globals (root is window)
    if (!root.OmnichannelApi) {
      root.OmnichannelApi = {};
    }
    root.OmnichannelApi.DeliveryResult = factory(root.OmnichannelApi.ApiClient, root.OmnichannelApi.Channel, root.OmnichannelApi.Status);
  }
}(this, function(ApiClient, Channel, Status) {
  'use strict';




  /**
   * The DeliveryResult model module.
   * @module model/DeliveryResult
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>DeliveryResult</code>.
   * @alias module:model/DeliveryResult
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>DeliveryResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeliveryResult} obj Optional instance to populate.
   * @return {module:model/DeliveryResult} The populated <code>DeliveryResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('status')) {
        obj['status'] = Status.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('channel')) {
        obj['channel'] = Channel.constructFromObject(data['channel']);
      }
      if (data.hasOwnProperty('message_id')) {
        obj['message_id'] = ApiClient.convertToType(data['message_id'], 'String');
      }
      if (data.hasOwnProperty('error')) {
        obj['error'] = ApiClient.convertToType(data['error'], 'String');
      }
      if (data.hasOwnProperty('err')) {
        obj['err'] = ApiClient.convertToType(data['err'], 'Number');
      }
      if (data.hasOwnProperty('timestamp')) {
        obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Status} status
   */
  exports.prototype['status'] = undefined;
  /**
   * @member {module:model/Channel} channel
   */
  exports.prototype['channel'] = undefined;
  /**
   * Unique identifier for the message
   * @member {String} message_id
   */
  exports.prototype['message_id'] = undefined;
  /**
   * Human-readable description of what went wrong, *null* in case of success or if the messages has not been processed yet
   * @member {String} error
   */
  exports.prototype['error'] = undefined;
  /**
   * Machine-readable error code, `null` when the message has not been processed yet * 0 - No error * 1 - Delivery failure * 2 - Sending message expired * 3 - Invalid number * 4 - Error crediting account * 5 - Invalid number format * 6 - Too many identical messages * 7 - Sender name not allowed * 8 - Operator blacklisted * 9 - Unroutable * 999 - General temporary error 
   * @member {module:model/DeliveryResult.ErrEnum} err
   */
  exports.prototype['err'] = undefined;
  /**
   * When this status was received by Omnichannel API
   * @member {Date} timestamp
   */
  exports.prototype['timestamp'] = undefined;


  /**
   * Allowed values for the <code>err</code> property.
   * @enum {Number}
   * @readonly
   */
  exports.ErrEnum = {
    /**
     * value: 0
     * @const
     */
    "0": 0,
    /**
     * value: 1
     * @const
     */
    "1": 1,
    /**
     * value: 2
     * @const
     */
    "2": 2,
    /**
     * value: 3
     * @const
     */
    "3": 3,
    /**
     * value: 4
     * @const
     */
    "4": 4,
    /**
     * value: 5
     * @const
     */
    "5": 5,
    /**
     * value: 6
     * @const
     */
    "6": 6,
    /**
     * value: 7
     * @const
     */
    "7": 7,
    /**
     * value: 8
     * @const
     */
    "8": 8,
    /**
     * value: 9
     * @const
     */
    "9": 9,
    /**
     * value: 999
     * @const
     */
    "999": 999  };


  return exports;
}));


